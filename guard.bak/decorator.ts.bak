import 'reflect-metadata'

import type { Type } from '@/core/decorators/types'

export const AUTH_GUARD_KEY = Symbol('auth:jwt')

export function Guard(): ClassDecorator & MethodDecorator {
  return (target: object, propertyKey?: string | symbol) => {
    if (propertyKey) Reflect.defineMetadata(AUTH_GUARD_KEY, target, propertyKey)
    else Reflect.defineMetadata(AUTH_GUARD_KEY, true, target)
  }
}

export function isGuarded(
  controllerInstance: Type,
  methodName: string | symbol,
): boolean {
  const methodMeta = Reflect.getMetadata(
    AUTH_GUARD_KEY,
    controllerInstance,
    methodName,
  ) as boolean | undefined
  if (typeof methodMeta === 'boolean') return methodMeta
  const classMeta = Reflect.getMetadata(
    AUTH_GUARD_KEY,
    controllerInstance.constructor,
  ) as boolean | undefined
  return !!classMeta
}
