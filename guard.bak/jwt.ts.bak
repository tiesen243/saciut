import type { NextFunction, Request, RequestHandler, Response } from 'express'

import type AuthService from '@/app/auth/auth.service'
import type JwtService from '@/common/services/jwt.service'
import { HttpError } from '@/common/utils/http'

export function createJwtGuard(
  jwtService: JwtService,
  authService: AuthService,
): RequestHandler {
  return async (req: Request, _res: Response, next: NextFunction) => {
    const token =
      (req.cookies['auth.token'] as string | undefined) ??
      req.headers.authorization?.replace('Bearer ', '') ??
      ''
    if (!token) throw new HttpError('UNAUTHORIZED')

    const payload = await jwtService.verify<{ userId: string }>(token)

    const user = await authService.getUser(payload?.userId ?? '')
    req.userId = user.id
    next()
  }
}
